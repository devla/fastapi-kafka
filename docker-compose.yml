version: "3.9"

services:
  producer:
    image: producer
    container_name: producer
    build:
      context: ./producer
    command: ["/bin/bash", "-c", "read && python src/main.py"]
    stdin_open: true
    tty: true
    volumes:
      - ./producer/src:/app/src
    depends_on:
      - kafka-init
    restart: always
    networks:
      - backend

  consumer:
    image: consumer
    container_name: consumer
    build:
      context: ./consumer
    command: ./scripts/run.sh
    volumes:
      - ./consumer:/app
    ports:
      - "8000:8000"
    depends_on:
      - kafka-init
      - postgres-db
    restart: always
    networks:
      - backend

  postgres-db:
    container_name: postgres-db
    image: postgres:latest
    env_file: ./consumer/.env
    ports:
      - "5433:5432"
    volumes:
      - data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend

  adminer:
    container_name: adminer
    image: adminer:latest
    ports:
      - 8081:8080
    restart: always
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - 22181:2181
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - 29091:9092
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - backend
    healthcheck:
      test: nc -z kafka1 29091 || exit 1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
    restart: always
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - backend
    healthcheck:
      test: nc -z kafka2 29092 || exit 1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - 29093:9092
    restart: always
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - backend
    healthcheck:
      test: nc -z kafka3 29093 || exit 1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:29091,kafka2:29092,kafka3:29093  # Update with broker hostnames and ports
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - backend

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    networks:
      - backend
    command: ["/bin/bash", "-c", "/create_topics.sh && tail -f /dev/null"]
    env_file: ./consumer/.env
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./create_topics.sh
        target: /create_topics.sh
    init: true

volumes:
  data:

networks:
  backend:
    driver: bridge
